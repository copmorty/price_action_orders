import 'package:decimal/decimal.dart';
import 'package:price_action_orders/core/globals/enums.dart';
import 'package:price_action_orders/domain/entities/userdata_payload_orderupdate.dart';

class UserDataPayloadOrderUpdateModel extends UserDataPayloadOrderUpdate {
  UserDataPayloadOrderUpdateModel({
    BinanceUserDataPayloadEventType/*!*/ eventType,
    int/*!*/ eventTime,
    String/*!*/ symbol,
    String/*!*/ clientOrderId,
    BinanceOrderSide/*!*/ side,
    BinanceOrderType/*!*/ orderType,
    BinanceOrderTimeInForce/*!*/ timeInForce,
    Decimal/*!*/ orderQuantity,
    Decimal/*!*/ orderPrice,
    Decimal/*!*/ stopPrice,
    Decimal/*!*/ icebergQuantity,
    int/*!*/ orderListId,
    String/*!*/ originalClientOrderId,
    BinanceOrderExecutionType/*!*/ currentExecutionType,
    BinanceOrderStatus/*!*/ currentOrderStatus,
    String/*!*/ orderRejectReason,
    int/*!*/ orderId,
    Decimal/*!*/ lastExecutedQuantity,
    Decimal/*!*/ cumulativeFilledQuantity,
    Decimal/*!*/ lastExecutedPrice,
    Decimal/*!*/ commisionAmount,
    String/*!*/ commisionAsset,
    int/*!*/ transactionTime,
    int/*!*/ tradeId,
    // required int ignore,//"I"
    bool/*!*/ orderIsOnTheBook,
    bool/*!*/ tradeIsTheMakerSide,
    // required bool ignore,//"M"
    int/*!*/ orderCreationTime,
    Decimal/*!*/ cumulativeQuoteAssetTransactedQuantity,
    Decimal/*!*/ lastQuoteAssetTransactedQuantity,
    Decimal/*!*/ quoteOrderQuantity,
  }) : super(
          eventType: eventType,
          eventTime: eventTime,
          symbol: symbol,
          clientOrderId: clientOrderId,
          side: side,
          orderType: orderType,
          timeInForce: timeInForce,
          orderQuantity: orderQuantity,
          orderPrice: orderPrice,
          stopPrice: stopPrice,
          icebergQuantity: icebergQuantity,
          orderListId: orderListId,
          originalClientOrderId: originalClientOrderId,
          currentExecutionType: currentExecutionType,
          currentOrderStatus: currentOrderStatus,
          orderRejectReason: orderRejectReason,
          orderId: orderId,
          lastExecutedQuantity: lastExecutedQuantity,
          cumulativeFilledQuantity: cumulativeFilledQuantity,
          lastExecutedPrice: lastExecutedPrice,
          commisionAmount: commisionAmount,
          commisionAsset: commisionAsset,
          transactionTime: transactionTime,
          tradeId: tradeId,
          orderIsOnTheBook: orderIsOnTheBook,
          tradeIsTheMakerSide: tradeIsTheMakerSide,
          orderCreationTime: orderCreationTime,
          cumulativeQuoteAssetTransactedQuantity: cumulativeQuoteAssetTransactedQuantity,
          lastQuoteAssetTransactedQuantity: lastQuoteAssetTransactedQuantity,
          quoteOrderQuantity: quoteOrderQuantity,
        );

  factory UserDataPayloadOrderUpdateModel.fromJson(Map<String, dynamic> parsedJson) {
    return UserDataPayloadOrderUpdateModel(
      eventType: BinanceUserDataPayloadEventType.values.firstWhere((enumElement) => enumElement.toShortString() == parsedJson['e'], orElse: () => null),
      eventTime: parsedJson['E'],
      symbol: parsedJson['s'],
      clientOrderId: parsedJson['c'],
      side: BinanceOrderSide.values.firstWhere((enumElement) => enumElement.toShortString() == parsedJson['S'], orElse: () => null),
      orderType: BinanceOrderType.values.firstWhere((enumElement) => enumElement.toShortString() == parsedJson['o'], orElse: () => null),
      timeInForce: BinanceOrderTimeInForce.values.firstWhere((enumElement) => enumElement.toShortString() == parsedJson['f'], orElse: () => null),
      orderQuantity: Decimal.parse(parsedJson['q']),
      orderPrice: Decimal.parse(parsedJson['p']),
      stopPrice: Decimal.parse(parsedJson['P']),
      icebergQuantity: Decimal.parse(parsedJson['F']),
      orderListId: parsedJson['g'],
      originalClientOrderId: parsedJson['C'],
      currentExecutionType: BinanceOrderExecutionType.values.firstWhere((enumElement) => enumElement.toShortString() == parsedJson['x'], orElse: () => null),
      currentOrderStatus: BinanceOrderStatus.values.firstWhere((enumElement) => enumElement.toShortString() == parsedJson['X'], orElse: () => null),
      orderRejectReason: parsedJson['r'],
      orderId: parsedJson['i'],
      lastExecutedQuantity: Decimal.parse(parsedJson['l']),
      cumulativeFilledQuantity: Decimal.parse(parsedJson['z']),
      lastExecutedPrice: Decimal.parse(parsedJson['L']),
      commisionAmount: Decimal.parse(parsedJson['n']),
      commisionAsset: parsedJson['N'],
      transactionTime: parsedJson['T'],
      tradeId: parsedJson['t'],
      orderIsOnTheBook: parsedJson['w'],
      tradeIsTheMakerSide: parsedJson['m'],
      orderCreationTime: parsedJson['O'],
      cumulativeQuoteAssetTransactedQuantity: Decimal.parse(parsedJson['Z']),
      lastQuoteAssetTransactedQuantity: Decimal.parse(parsedJson['Y']),
      quoteOrderQuantity: Decimal.parse(parsedJson['Q']),
    );
  }
}
