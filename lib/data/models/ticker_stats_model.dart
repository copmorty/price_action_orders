import 'package:decimal/decimal.dart';
import 'package:price_action_orders/domain/entities/ticker.dart';
import 'package:price_action_orders/domain/entities/ticker_stats.dart';

class TickerStatsModel extends TickerStats {
  TickerStatsModel({
    required String eventType,
    required int eventTime,
    required String symbol,
    required Decimal priceChange,
    required Decimal priceChangePercent,
    required Decimal weightedAveragePrice,
    required Decimal firstTradeBefore, //First trade(F)-1 price (first trade before the 24hr rolling window)
    required Decimal lastPrice,
    required Decimal lastQuantity,
    required Decimal bestBidPrice,
    required Decimal bestBidQuantity,
    required Decimal bestAskPrice,
    required Decimal bestAskQuantity,
    required Decimal openPrice,
    required Decimal highPrice,
    required Decimal lowPrice,
    required Decimal totalTradedBaseAssetVolume,
    required Decimal totalTradedQuoteAssetVolume,
    required int statisticsOpenTime,
    required int statisticsCloseTime,
    required int firstTradeId,
    required int lastTradeId,
    required int totalNumberOfTrades,
    required Ticker ticker,
  }) : super(
          eventType: eventType,
          eventTime: eventTime,
          symbol: symbol,
          priceChange: priceChange,
          priceChangePercent: priceChangePercent,
          weightedAveragePrice: weightedAveragePrice,
          firstTradeBefore: firstTradeBefore,
          lastPrice: lastPrice,
          lastQuantity: lastQuantity,
          bestBidPrice: bestBidPrice,
          bestBidQuantity: bestBidQuantity,
          bestAskPrice: bestAskPrice,
          bestAskQuantity: bestAskQuantity,
          openPrice: openPrice,
          highPrice: highPrice,
          lowPrice: lowPrice,
          totalTradedBaseAssetVolume: totalTradedBaseAssetVolume,
          totalTradedQuoteAssetVolume: totalTradedQuoteAssetVolume,
          statisticsOpenTime: statisticsOpenTime,
          statisticsCloseTime: statisticsCloseTime,
          firstTradeId: firstTradeId,
          lastTradeId: lastTradeId,
          totalNumberOfTrades: totalNumberOfTrades,
          ticker: ticker,
        );

  factory TickerStatsModel.fromJson(Map<String, dynamic> json, Ticker ticker) {
    return TickerStatsModel(
      eventType: json['e'],
      eventTime: json['E'],
      symbol: json['s'],
      priceChange: Decimal.parse(json['p']),
      priceChangePercent: Decimal.parse(json['P']),
      weightedAveragePrice: Decimal.parse(json['w']),
      firstTradeBefore: Decimal.parse(json['x']),
      lastPrice: Decimal.parse(json['c']),
      lastQuantity: Decimal.parse(json['Q']),
      bestBidPrice: Decimal.parse(json['b']),
      bestBidQuantity: Decimal.parse(json['B']),
      bestAskPrice: Decimal.parse(json['a']),
      bestAskQuantity: Decimal.parse(json['A']),
      openPrice: Decimal.parse(json['o']),
      highPrice: Decimal.parse(json['h']),
      lowPrice: Decimal.parse(json['l']),
      totalTradedBaseAssetVolume: Decimal.parse(json['v']),
      totalTradedQuoteAssetVolume: Decimal.parse(json['q']),
      statisticsOpenTime: json['O'],
      statisticsCloseTime: json['C'],
      firstTradeId: json['F'],
      lastTradeId: json['L'],
      totalNumberOfTrades: json['n'],
      ticker: ticker,
    );
  }
}
