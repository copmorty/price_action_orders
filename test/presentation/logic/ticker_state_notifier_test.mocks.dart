// Mocks generated by Mockito 5.0.15 from annotations
// in price_action_orders/test/presentation/logic/ticker_state_notifier_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:price_action_orders/core/error/failures.dart' as _i7;
import 'package:price_action_orders/core/usecases/usecase.dart' as _i9;
import 'package:price_action_orders/domain/entities/exchange_info.dart' as _i12;
import 'package:price_action_orders/domain/entities/ticker.dart' as _i8;
import 'package:price_action_orders/domain/repositories/user_repository.dart'
    as _i2;
import 'package:price_action_orders/domain/usecases/user_get_last_ticker_uc.dart'
    as _i5;
import 'package:price_action_orders/domain/usecases/user_set_last_ticker_uc.dart'
    as _i10;
import 'package:price_action_orders/presentation/logic/exchangeinfo_state_notifier.dart'
    as _i4;
import 'package:state_notifier/state_notifier.dart' as _i13;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeUserRepository_0 extends _i1.Fake implements _i2.UserRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeExchangeInfoState_2 extends _i1.Fake
    implements _i4.ExchangeInfoState {}

/// A class which mocks [GetLastTicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetLastTicker extends _i1.Mock implements _i5.GetLastTicker {
  MockGetLastTicker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeUserRepository_0()) as _i2.UserRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.Ticker>> call(_i9.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i7.Failure, _i8.Ticker>>.value(
                  _FakeEither_1<_i7.Failure, _i8.Ticker>()))
          as _i6.Future<_i3.Either<_i7.Failure, _i8.Ticker>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SetLastTicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetLastTicker extends _i1.Mock implements _i10.SetLastTicker {
  MockSetLastTicker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeUserRepository_0()) as _i2.UserRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, Null?>> call(_i10.Params? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i7.Failure, Null?>>.value(
                  _FakeEither_1<_i7.Failure, Null?>()))
          as _i6.Future<_i3.Either<_i7.Failure, Null?>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ExchangeInfoNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockExchangeInfoNotifier extends _i1.Mock
    implements _i4.ExchangeInfoNotifier {
  MockExchangeInfoNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i11.ErrorListener? _onError) =>
      super.noSuchMethod(Invocation.setter(#onError, _onError),
          returnValueForMissingStub: null);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);
  @override
  _i6.Stream<_i4.ExchangeInfoState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i4.ExchangeInfoState>.empty())
          as _i6.Stream<_i4.ExchangeInfoState>);
  @override
  _i4.ExchangeInfoState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeExchangeInfoState_2()) as _i4.ExchangeInfoState);
  @override
  set state(_i4.ExchangeInfoState? value) =>
      super.noSuchMethod(Invocation.setter(#state, value),
          returnValueForMissingStub: null);
  @override
  _i4.ExchangeInfoState get debugState =>
      (super.noSuchMethod(Invocation.getter(#debugState),
          returnValue: _FakeExchangeInfoState_2()) as _i4.ExchangeInfoState);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i12.ExchangeInfo>> getExchangeInfo() =>
      (super.noSuchMethod(Invocation.method(#getExchangeInfo, []),
          returnValue: Future<_i3.Either<_i7.Failure, _i12.ExchangeInfo>>.value(
              _FakeEither_1<_i7.Failure, _i12.ExchangeInfo>())) as _i6
          .Future<_i3.Either<_i7.Failure, _i12.ExchangeInfo>>);
  @override
  _i11.RemoveListener addListener(
          _i13.Listener<_i4.ExchangeInfoState>? listener,
          {bool? fireImmediately = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addListener, [listener], {#fireImmediately: fireImmediately}),
          returnValue: () {}) as _i11.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
