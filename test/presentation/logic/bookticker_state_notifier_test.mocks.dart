// Mocks generated by Mockito 5.0.15 from annotations
// in price_action_orders/test/presentation/logic/bookticker_state_notifier_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:price_action_orders/core/error/failures.dart' as _i7;
import 'package:price_action_orders/core/usecases/usecase.dart' as _i9;
import 'package:price_action_orders/domain/entities/bookticker.dart' as _i11;
import 'package:price_action_orders/domain/entities/ticker.dart' as _i8;
import 'package:price_action_orders/domain/repositories/market_respository.dart'
    as _i4;
import 'package:price_action_orders/domain/repositories/user_repository.dart'
    as _i2;
import 'package:price_action_orders/domain/usecases/market_get_bookticker_stream_uc.dart'
    as _i10;
import 'package:price_action_orders/domain/usecases/user_get_last_ticker_uc.dart'
    as _i5;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeUserRepository_0 extends _i1.Fake implements _i2.UserRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeMarketRepository_2 extends _i1.Fake implements _i4.MarketRepository {
}

/// A class which mocks [GetLastTicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetLastTicker extends _i1.Mock implements _i5.GetLastTicker {
  MockGetLastTicker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeUserRepository_0()) as _i2.UserRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.Ticker>> call(_i9.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i7.Failure, _i8.Ticker>>.value(
                  _FakeEither_1<_i7.Failure, _i8.Ticker>()))
          as _i6.Future<_i3.Either<_i7.Failure, _i8.Ticker>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetBookTickerStream].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetBookTickerStream extends _i1.Mock
    implements _i10.GetBookTickerStream {
  MockGetBookTickerStream() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MarketRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMarketRepository_2()) as _i4.MarketRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i6.Stream<_i11.BookTicker>>> call(
          _i10.Params? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<
                  _i3.Either<_i7.Failure, _i6.Stream<_i11.BookTicker>>>.value(
              _FakeEither_1<_i7.Failure, _i6.Stream<_i11.BookTicker>>())) as _i6
          .Future<_i3.Either<_i7.Failure, _i6.Stream<_i11.BookTicker>>>);
  @override
  String toString() => super.toString();
}
