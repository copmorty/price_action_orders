// Mocks generated by Mockito 5.0.10 from annotations
// in price_action_orders/test/data/repositories/market_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:price_action_orders/data/datasources/market_datasource.dart'
    as _i3;
import 'package:price_action_orders/domain/entities/bookticker.dart' as _i5;
import 'package:price_action_orders/domain/entities/exchange_info.dart' as _i2;
import 'package:price_action_orders/domain/entities/ticker.dart' as _i6;
import 'package:price_action_orders/domain/entities/ticker_stats.dart' as _i7;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeExchangeInfo extends _i1.Fake implements _i2.ExchangeInfo {}

/// A class which mocks [MarketDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMarketDataSource extends _i1.Mock implements _i3.MarketDataSource {
  MockMarketDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i4.Stream<_i5.BookTicker>> getBookTickerStream(
          _i6.Ticker? ticker) =>
      (super.noSuchMethod(Invocation.method(#getBookTickerStream, [ticker]),
              returnValue: Future<_i4.Stream<_i5.BookTicker>>.value(
                  Stream<_i5.BookTicker>.empty()))
          as _i4.Future<_i4.Stream<_i5.BookTicker>>);
  @override
  _i4.Future<_i4.Stream<_i7.TickerStats>> getTickerStatsStream(
          _i6.Ticker? ticker) =>
      (super.noSuchMethod(Invocation.method(#getTickerStatsStream, [ticker]),
              returnValue: Future<_i4.Stream<_i7.TickerStats>>.value(
                  Stream<_i7.TickerStats>.empty()))
          as _i4.Future<_i4.Stream<_i7.TickerStats>>);
  @override
  _i4.Future<_i2.ExchangeInfo> getExchangeInfo() =>
      (super.noSuchMethod(Invocation.method(#getExchangeInfo, []),
              returnValue: Future<_i2.ExchangeInfo>.value(_FakeExchangeInfo()))
          as _i4.Future<_i2.ExchangeInfo>);
}
