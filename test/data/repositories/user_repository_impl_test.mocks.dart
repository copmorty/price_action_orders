// Mocks generated by Mockito 5.0.10 from annotations
// in price_action_orders/test/data/repositories/user_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:price_action_orders/data/datasources/user_datasource.dart'
    as _i3;
import 'package:price_action_orders/domain/entities/order.dart' as _i5;
import 'package:price_action_orders/domain/entities/userdata.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeUserData extends _i1.Fake implements _i2.UserData {}

/// A class which mocks [UserDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserDataSource extends _i1.Mock implements _i3.UserDataSource {
  MockUserDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.UserData> getAccountInfo() =>
      (super.noSuchMethod(Invocation.method(#getAccountInfo, []),
              returnValue: Future<_i2.UserData>.value(_FakeUserData()))
          as _i4.Future<_i2.UserData>);
  @override
  _i4.Future<List<_i5.Order>> getOpenOrders() =>
      (super.noSuchMethod(Invocation.method(#getOpenOrders, []),
              returnValue: Future<List<_i5.Order>>.value(<_i5.Order>[]))
          as _i4.Future<List<_i5.Order>>);
  @override
  _i4.Future<_i4.Stream<dynamic>> getUserDataStream() =>
      (super.noSuchMethod(Invocation.method(#getUserDataStream, []),
              returnValue:
                  Future<_i4.Stream<dynamic>>.value(Stream<dynamic>.empty()))
          as _i4.Future<_i4.Stream<dynamic>>);
}
