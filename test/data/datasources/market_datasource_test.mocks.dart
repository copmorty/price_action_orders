// Mocks generated by Mockito 5.0.10 from annotations
// in price_action_orders/test/data/datasources/market_datasource_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i2;
import 'dart:io' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:price_action_orders/core/utils/datasource_utils.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeTimer extends _i1.Fake implements _i2.Timer {}

class _FakeWebSocket extends _i1.Fake implements _i3.WebSocket {}

/// A class which mocks [DataSourceUtils].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataSourceUtils extends _i1.Mock implements _i4.DataSourceUtils {
  MockDataSourceUtils() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Timer periodicValidityExpander(Function? listenKeyValidityExpander,
          _i2.StreamController<dynamic>? streamController) =>
      (super.noSuchMethod(
          Invocation.method(#periodicValidityExpander,
              [listenKeyValidityExpander, streamController]),
          returnValue: _FakeTimer()) as _i2.Timer);
  @override
  _i2.Future<_i3.WebSocket> webSocketConnect(String? url,
          {Iterable<String>? protocols,
          Map<String, dynamic>? headers,
          _i3.CompressionOptions? compression =
              const _i3.CompressionOptions()}) =>
      (super.noSuchMethod(
              Invocation.method(#webSocketConnect, [
                url
              ], {
                #protocols: protocols,
                #headers: headers,
                #compression: compression
              }),
              returnValue: Future<_i3.WebSocket>.value(_FakeWebSocket()))
          as _i2.Future<_i3.WebSocket>);
}
