// Mocks generated by Mockito 5.0.10 from annotations
// in price_action_orders/test/data/datasources/market_datasource_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i2;
import 'dart:io' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:price_action_orders/core/utils/datasource_utils.dart' as _i5;
import 'package:shared_preferences/shared_preferences.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeTimer extends _i1.Fake implements _i2.Timer {}

class _FakeWebSocket extends _i1.Fake implements _i3.WebSocket {}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i4.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(Invocation.method(#getKeys, []),
      returnValue: <String>{}) as Set<String>);
  @override
  Object? get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key])) as Object?);
  @override
  bool? getBool(String? key) =>
      (super.noSuchMethod(Invocation.method(#getBool, [key])) as bool?);
  @override
  int? getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key])) as int?);
  @override
  double? getDouble(String? key) =>
      (super.noSuchMethod(Invocation.method(#getDouble, [key])) as double?);
  @override
  String? getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key])) as String?);
  @override
  bool containsKey(String? key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: false) as bool);
  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#getStringList, [key]))
          as List<String>?);
  @override
  _i2.Future<bool> setBool(String? key, bool? value) =>
      (super.noSuchMethod(Invocation.method(#setBool, [key, value]),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<bool> setInt(String? key, int? value) =>
      (super.noSuchMethod(Invocation.method(#setInt, [key, value]),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<bool> setDouble(String? key, double? value) =>
      (super.noSuchMethod(Invocation.method(#setDouble, [key, value]),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#setString, [key, value]),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<bool> setStringList(String? key, List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setStringList, [key, value]),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<bool> remove(String? key) =>
      (super.noSuchMethod(Invocation.method(#remove, [key]),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<bool> commit() =>
      (super.noSuchMethod(Invocation.method(#commit, []),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<bool> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<void> reload() =>
      (super.noSuchMethod(Invocation.method(#reload, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i2.Future<void>);
}

/// A class which mocks [DataSourceUtils].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataSourceUtils extends _i1.Mock implements _i5.DataSourceUtils {
  MockDataSourceUtils() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Timer periodicValidityExpander(Function? listenKeyValidityExpander,
          _i2.StreamController<dynamic>? streamController) =>
      (super.noSuchMethod(
          Invocation.method(#periodicValidityExpander,
              [listenKeyValidityExpander, streamController]),
          returnValue: _FakeTimer()) as _i2.Timer);
  @override
  _i2.Future<_i3.WebSocket> webSocketConnect(String? url,
          {Iterable<String>? protocols,
          Map<String, dynamic>? headers,
          _i3.CompressionOptions? compression =
              const _i3.CompressionOptions()}) =>
      (super.noSuchMethod(
              Invocation.method(#webSocketConnect, [
                url
              ], {
                #protocols: protocols,
                #headers: headers,
                #compression: compression
              }),
              returnValue: Future<_i3.WebSocket>.value(_FakeWebSocket()))
          as _i2.Future<_i3.WebSocket>);
}
