// Mocks generated by Mockito 5.0.10 from annotations
// in price_action_orders/test/data/datasources/user_datasource_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i2;
import 'dart:convert' as _i8;
import 'dart:io' as _i3;
import 'dart:typed_data' as _i9;

import 'package:http/src/base_request.dart' as _i10;
import 'package:http/src/client.dart' as _i7;
import 'package:http/src/response.dart' as _i4;
import 'package:http/src/streamed_response.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:price_action_orders/core/utils/datasource_utils.dart' as _i6;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeTimer extends _i1.Fake implements _i2.Timer {}

class _FakeWebSocket extends _i1.Fake implements _i3.WebSocket {}

class _FakeResponse extends _i1.Fake implements _i4.Response {}

class _FakeStreamedResponse extends _i1.Fake implements _i5.StreamedResponse {}

/// A class which mocks [DataSourceUtils].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataSourceUtils extends _i1.Mock implements _i6.DataSourceUtils {
  MockDataSourceUtils() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Timer periodicValidityExpander(Function? listenKeyValidityExpander,
          _i2.StreamController<dynamic>? streamController) =>
      (super.noSuchMethod(
          Invocation.method(#periodicValidityExpander,
              [listenKeyValidityExpander, streamController]),
          returnValue: _FakeTimer()) as _i2.Timer);
  @override
  _i2.Future<_i3.WebSocket> webSocketConnect(String? url,
          {Iterable<String>? protocols,
          Map<String, dynamic>? headers,
          _i3.CompressionOptions? compression =
              const _i3.CompressionOptions()}) =>
      (super.noSuchMethod(
              Invocation.method(#webSocketConnect, [
                url
              ], {
                #protocols: protocols,
                #headers: headers,
                #compression: compression
              }),
              returnValue: Future<_i3.WebSocket>.value(_FakeWebSocket()))
          as _i2.Future<_i3.WebSocket>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i7.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<_i4.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i4.Response>.value(_FakeResponse()))
          as _i2.Future<_i4.Response>);
  @override
  _i2.Future<_i4.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i4.Response>.value(_FakeResponse()))
          as _i2.Future<_i4.Response>);
  @override
  _i2.Future<_i4.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse()))
          as _i2.Future<_i4.Response>);
  @override
  _i2.Future<_i4.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse()))
          as _i2.Future<_i4.Response>);
  @override
  _i2.Future<_i4.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse()))
          as _i2.Future<_i4.Response>);
  @override
  _i2.Future<_i4.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse()))
          as _i2.Future<_i4.Response>);
  @override
  _i2.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i2.Future<String>);
  @override
  _i2.Future<_i9.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i9.Uint8List>.value(_i9.Uint8List(0)))
          as _i2.Future<_i9.Uint8List>);
  @override
  _i2.Future<_i5.StreamedResponse> send(_i10.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i5.StreamedResponse>.value(_FakeStreamedResponse()))
          as _i2.Future<_i5.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
